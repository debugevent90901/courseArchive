
lab7_app.elf:     file format elf32-littlenios2
lab7_app.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000020

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00000a28 memsz 0x00000a28 flags r-x
    LOAD off    0x00001a48 vaddr 0x10000a48 paddr 0x10001034 align 2**12
         filesz 0x000005ec memsz 0x000005ec flags rw-
    LOAD off    0x00002620 vaddr 0x10001620 paddr 0x10001620 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  10000020  10000020  00002034  2**0
                  CONTENTS
  2 .text         00000a18  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000010  10000a38  10000a38  00001a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000005ec  10000a48  10001034  00001a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  10001620  10001620  00002620  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00002034  2**0
                  CONTENTS
  7 .sdram        00000000  10001630  10001630  00002034  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000002b0  00000000  00000000  00002058  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00003a4d  00000000  00000000  00002308  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000011b0  00000000  00000000  00005d55  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000124a  00000000  00000000  00006f05  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000040c  00000000  00000000  00008150  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000eef  00000000  00000000  0000855c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000430  00000000  00000000  0000944b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  0000987c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000080  00000000  00000000  00009890  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0000aace  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0000aad1  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0000aadd  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0000aade  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0000aadf  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0000aae3  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0000aae7  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000004  00000000  00000000  0000aaeb  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000004  00000000  00000000  0000aaef  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000004  00000000  00000000  0000aaf3  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  0000aaf7  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000002d  00000000  00000000  0000aaff  2**0
                  CONTENTS, READONLY
 30 .jdi          00003db5  00000000  00000000  0000ab2c  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00055c9d  00000000  00000000  0000e8e1  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000020 l    d  .text	00000000 .text
10000a38 l    d  .rodata	00000000 .rodata
10000a48 l    d  .rwdata	00000000 .rwdata
10001620 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10001630 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab7_app_bsp//obj/HAL/src/crt0.o
10000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 alt_load.c
10000268 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_close.c
10000410 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
10000544 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
10000bf0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
10000354 g     F .text	00000060 alt_main
10001034 g       *ABS*	00000000 __flash_rwdata_start
100006d4 g     F .text	00000024 altera_nios2_gen2_irq_init
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
1000162c g     O .bss	00000004 errno
10001624 g     O .bss	00000004 alt_argv
10009014 g       *ABS*	00000000 _gp
10000a70 g     O .rwdata	00000180 alt_fd_list
10000a38 g       *ABS*	00000000 __DTOR_END__
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10001024 g     O .rwdata	00000004 alt_max_fd
1000102c g     O .rwdata	00000004 _global_impure_ptr
10001630 g       *ABS*	00000000 __bss_end
10000a48 g     O .rwdata	00000028 alt_dev_null
10000524 g     F .text	00000020 alt_dcache_flush_all
10001034 g       *ABS*	00000000 __ram_rwdata_end
1000101c g     O .rwdata	00000008 alt_dev_list
10000a48 g       *ABS*	00000000 __ram_rodata_end
10001630 g       *ABS*	00000000 end
10000a38 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
1000085c g     F .text	00000180 __call_exitprocs
10000020 g     F .text	0000003c _start
100003ec g     F .text	00000024 alt_sys_init
10000744 g     F .text	00000118 __register_exitproc
100009dc g     F .text	00000028 .hidden __mulsi3
10000a48 g       *ABS*	00000000 __ram_rwdata_start
10000a38 g       *ABS*	00000000 __ram_rodata_start
10001630 g       *ABS*	00000000 __alt_stack_base
10001620 g       *ABS*	00000000 __bss_start
1000005c g     F .text	0000020c main
10001628 g     O .bss	00000004 alt_envp
10001028 g     O .rwdata	00000004 alt_errno
10000a38 g       *ABS*	00000000 __CTOR_END__
10000a38 g       *ABS*	00000000 __flash_rodata_start
10000a38 g       *ABS*	00000000 __DTOR_LIST__
100003b4 g     F .text	00000038 alt_irq_init
10000650 g     F .text	00000084 alt_release_fd
100006f8 g     F .text	00000014 atexit
10001030 g     O .rwdata	00000004 _impure_ptr
10001620 g     O .bss	00000004 alt_argc
100005d0 g     F .text	00000060 _do_dtors
10001014 g     O .rwdata	00000008 alt_fs_list
10000020 g       *ABS*	00000000 __ram_exceptions_start
10001034 g       *ABS*	00000000 _edata
10001630 g       *ABS*	00000000 _end
10000020 g       *ABS*	00000000 __ram_exceptions_end
1000070c g     F .text	00000038 exit
18000000 g       *ABS*	00000000 __alt_data_end
10000000 g       *ABS*	00000000 __alt_mem_sdram
10000a04 g     F .text	00000034 _exit
10000630 g     F .text	00000020 alt_icache_flush_all
10000570 g     F .text	00000060 _do_ctors
1000044c g     F .text	000000d8 close
100002d0 g     F .text	00000084 alt_load



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08400814 	ori	at,at,32
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .text:

10000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000020:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000028:	06840034 	movhi	gp,4096
    ori gp, gp, %lo(_gp)
1000002c:	d6a40514 	ori	gp,gp,36884
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000030:	00840034 	movhi	r2,4096
    ori r2, r2, %lo(__bss_start)
10000034:	10858814 	ori	r2,r2,5664

    movhi r3, %hi(__bss_end)
10000038:	00c40034 	movhi	r3,4096
    ori r3, r3, %lo(__bss_end)
1000003c:	18c58c14 	ori	r3,r3,5680

    beq r2, r3, 1f
10000040:	10c00326 	beq	r2,r3,10000050 <_start+0x30>

0:
    stw zero, (r2)
10000044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1000004c:	10fffd36 	bltu	r2,r3,10000044 <__alt_data_end+0xf8000044>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000050:	00002d00 	call	100002d0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000054:	00003540 	call	10000354 <alt_main>

10000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000058:	003fff06 	br	10000058 <__alt_data_end+0xf8000058>

1000005c <main>:
int main()
{
1000005c:	defff904 	addi	sp,sp,-28
10000060:	df000615 	stw	fp,24(sp)
10000064:	df000604 	addi	fp,sp,24
	int i = 0;
10000068:	e03ffa15 	stw	zero,-24(fp)
	volatile unsigned int *LED_PIO = (unsigned int*)0x70; //make a pointer to access the led PIO block
1000006c:	00801c04 	movi	r2,112
10000070:	e0bffc15 	stw	r2,-16(fp)
	volatile unsigned int *SW_PIO = (unsigned int*)0x60; //make a pointer to access the switch PIO block
10000074:	00801804 	movi	r2,96
10000078:	e0bffd15 	stw	r2,-12(fp)
	volatile unsigned int *KEY_PIO = (unsigned int*)0x50;
1000007c:	00801404 	movi	r2,80
10000080:	e0bffe15 	stw	r2,-8(fp)

	enum states {START, ADD, HALT, CLEAR, STOP};
	*LED_PIO = 0; //clear all LEDs
10000084:	e0bffc17 	ldw	r2,-16(fp)
10000088:	10000015 	stw	zero,0(r2)
	enum states current_state = START;
1000008c:	e03fff15 	stw	zero,-4(fp)
	enum states next_state = current_state;
10000090:	e0bfff17 	ldw	r2,-4(fp)
10000094:	e0bffb15 	stw	r2,-20(fp)

	while ( (1+1) != 3) //infinite loop
	{
		for (i = 0; i < 1000; i++); //software delay
10000098:	e03ffa15 	stw	zero,-24(fp)
1000009c:	00000306 	br	100000ac <main+0x50>
100000a0:	e0bffa17 	ldw	r2,-24(fp)
100000a4:	10800044 	addi	r2,r2,1
100000a8:	e0bffa15 	stw	r2,-24(fp)
100000ac:	e0bffa17 	ldw	r2,-24(fp)
100000b0:	1080fa10 	cmplti	r2,r2,1000
100000b4:	103ffa1e 	bne	r2,zero,100000a0 <__alt_data_end+0xf80000a0>
		current_state = next_state;
100000b8:	e0bffb17 	ldw	r2,-20(fp)
100000bc:	e0bfff15 	stw	r2,-4(fp)
		switch(current_state)
100000c0:	e0bfff17 	ldw	r2,-4(fp)
100000c4:	10800168 	cmpgeui	r2,r2,5
100000c8:	103ff31e 	bne	r2,zero,10000098 <__alt_data_end+0xf8000098>
100000cc:	e0bfff17 	ldw	r2,-4(fp)
100000d0:	100690ba 	slli	r3,r2,2
100000d4:	00840034 	movhi	r2,4096
100000d8:	10803a04 	addi	r2,r2,232
100000dc:	1885883a 	add	r2,r3,r2
100000e0:	10800017 	ldw	r2,0(r2)
100000e4:	1000683a 	jmp	r2
100000e8:	100000fc 	xorhi	zero,r2,3
100000ec:	1000013c 	xorhi	zero,r2,4
100000f0:	1000019c 	xori	zero,r2,6
100000f4:	100001dc 	xori	zero,r2,7
100000f8:	10000224 	muli	zero,r2,8
		{
			case START:
				//*LED_PIO = 0x2;
				if(*KEY_PIO == 0x3)
100000fc:	e0bffe17 	ldw	r2,-8(fp)
10000100:	10800017 	ldw	r2,0(r2)
10000104:	108000d8 	cmpnei	r2,r2,3
10000108:	1000021e 	bne	r2,zero,10000114 <main+0xb8>
					next_state = START;
1000010c:	e03ffb15 	stw	zero,-20(fp)
				else if(*KEY_PIO == 0x1)
					next_state = ADD;
				else
					next_state = CLEAR;
				break;
10000110:	00005406 	br	10000264 <main+0x208>
		{
			case START:
				//*LED_PIO = 0x2;
				if(*KEY_PIO == 0x3)
					next_state = START;
				else if(*KEY_PIO == 0x1)
10000114:	e0bffe17 	ldw	r2,-8(fp)
10000118:	10800017 	ldw	r2,0(r2)
1000011c:	10800058 	cmpnei	r2,r2,1
10000120:	1000031e 	bne	r2,zero,10000130 <main+0xd4>
					next_state = ADD;
10000124:	00800044 	movi	r2,1
10000128:	e0bffb15 	stw	r2,-20(fp)
				else
					next_state = CLEAR;
				break;
1000012c:	00004d06 	br	10000264 <main+0x208>
				if(*KEY_PIO == 0x3)
					next_state = START;
				else if(*KEY_PIO == 0x1)
					next_state = ADD;
				else
					next_state = CLEAR;
10000130:	008000c4 	movi	r2,3
10000134:	e0bffb15 	stw	r2,-20(fp)
				break;
10000138:	00004a06 	br	10000264 <main+0x208>
			case ADD:
				*LED_PIO = (*LED_PIO + *SW_PIO)%0x100;
1000013c:	e0bffc17 	ldw	r2,-16(fp)
10000140:	10c00017 	ldw	r3,0(r2)
10000144:	e0bffd17 	ldw	r2,-12(fp)
10000148:	10800017 	ldw	r2,0(r2)
1000014c:	1885883a 	add	r2,r3,r2
10000150:	10c03fcc 	andi	r3,r2,255
10000154:	e0bffc17 	ldw	r2,-16(fp)
10000158:	10c00015 	stw	r3,0(r2)
				if(*KEY_PIO == 0x3)
1000015c:	e0bffe17 	ldw	r2,-8(fp)
10000160:	10800017 	ldw	r2,0(r2)
10000164:	108000d8 	cmpnei	r2,r2,3
10000168:	1000021e 	bne	r2,zero,10000174 <main+0x118>
					next_state = START;
1000016c:	e03ffb15 	stw	zero,-20(fp)
				else if(*KEY_PIO == 0x1)
					next_state = HALT;
				else
					next_state = CLEAR;
				break;
10000170:	00003c06 	br	10000264 <main+0x208>
				break;
			case ADD:
				*LED_PIO = (*LED_PIO + *SW_PIO)%0x100;
				if(*KEY_PIO == 0x3)
					next_state = START;
				else if(*KEY_PIO == 0x1)
10000174:	e0bffe17 	ldw	r2,-8(fp)
10000178:	10800017 	ldw	r2,0(r2)
1000017c:	10800058 	cmpnei	r2,r2,1
10000180:	1000031e 	bne	r2,zero,10000190 <main+0x134>
					next_state = HALT;
10000184:	00800084 	movi	r2,2
10000188:	e0bffb15 	stw	r2,-20(fp)
				else
					next_state = CLEAR;
				break;
1000018c:	00003506 	br	10000264 <main+0x208>
				if(*KEY_PIO == 0x3)
					next_state = START;
				else if(*KEY_PIO == 0x1)
					next_state = HALT;
				else
					next_state = CLEAR;
10000190:	008000c4 	movi	r2,3
10000194:	e0bffb15 	stw	r2,-20(fp)
				break;
10000198:	00003206 	br	10000264 <main+0x208>
			case HALT:
				if(*KEY_PIO == 0x3)
1000019c:	e0bffe17 	ldw	r2,-8(fp)
100001a0:	10800017 	ldw	r2,0(r2)
100001a4:	108000d8 	cmpnei	r2,r2,3
100001a8:	1000021e 	bne	r2,zero,100001b4 <main+0x158>
					next_state = START;
100001ac:	e03ffb15 	stw	zero,-20(fp)
				else if(*KEY_PIO == 0x1)
					next_state = HALT;
				else
					next_state = CLEAR;
				break;
100001b0:	00002c06 	br	10000264 <main+0x208>
					next_state = CLEAR;
				break;
			case HALT:
				if(*KEY_PIO == 0x3)
					next_state = START;
				else if(*KEY_PIO == 0x1)
100001b4:	e0bffe17 	ldw	r2,-8(fp)
100001b8:	10800017 	ldw	r2,0(r2)
100001bc:	10800058 	cmpnei	r2,r2,1
100001c0:	1000031e 	bne	r2,zero,100001d0 <main+0x174>
					next_state = HALT;
100001c4:	00800084 	movi	r2,2
100001c8:	e0bffb15 	stw	r2,-20(fp)
				else
					next_state = CLEAR;
				break;
100001cc:	00002506 	br	10000264 <main+0x208>
				if(*KEY_PIO == 0x3)
					next_state = START;
				else if(*KEY_PIO == 0x1)
					next_state = HALT;
				else
					next_state = CLEAR;
100001d0:	008000c4 	movi	r2,3
100001d4:	e0bffb15 	stw	r2,-20(fp)
				break;
100001d8:	00002206 	br	10000264 <main+0x208>
			case CLEAR:
				*LED_PIO = 0x0;
100001dc:	e0bffc17 	ldw	r2,-16(fp)
100001e0:	10000015 	stw	zero,0(r2)
				if(*KEY_PIO == 0x3)
100001e4:	e0bffe17 	ldw	r2,-8(fp)
100001e8:	10800017 	ldw	r2,0(r2)
100001ec:	108000d8 	cmpnei	r2,r2,3
100001f0:	1000021e 	bne	r2,zero,100001fc <main+0x1a0>
					next_state = START;
100001f4:	e03ffb15 	stw	zero,-20(fp)
				else if(*KEY_PIO == 0x1)
					next_state = ADD;
				else
					next_state = STOP;
				break;
100001f8:	00001a06 	br	10000264 <main+0x208>
				break;
			case CLEAR:
				*LED_PIO = 0x0;
				if(*KEY_PIO == 0x3)
					next_state = START;
				else if(*KEY_PIO == 0x1)
100001fc:	e0bffe17 	ldw	r2,-8(fp)
10000200:	10800017 	ldw	r2,0(r2)
10000204:	10800058 	cmpnei	r2,r2,1
10000208:	1000031e 	bne	r2,zero,10000218 <main+0x1bc>
					next_state = ADD;
1000020c:	00800044 	movi	r2,1
10000210:	e0bffb15 	stw	r2,-20(fp)
				else
					next_state = STOP;
				break;
10000214:	00001306 	br	10000264 <main+0x208>
				if(*KEY_PIO == 0x3)
					next_state = START;
				else if(*KEY_PIO == 0x1)
					next_state = ADD;
				else
					next_state = STOP;
10000218:	00800104 	movi	r2,4
1000021c:	e0bffb15 	stw	r2,-20(fp)
				break;
10000220:	00001006 	br	10000264 <main+0x208>
			case STOP:
				if(*KEY_PIO == 0x3)
10000224:	e0bffe17 	ldw	r2,-8(fp)
10000228:	10800017 	ldw	r2,0(r2)
1000022c:	108000d8 	cmpnei	r2,r2,3
10000230:	1000021e 	bne	r2,zero,1000023c <main+0x1e0>
					next_state = START;
10000234:	e03ffb15 	stw	zero,-20(fp)
				else if(*KEY_PIO == 0x1)
					next_state = ADD;
				else
					next_state = STOP;
				break;
10000238:	00000906 	br	10000260 <main+0x204>
					next_state = STOP;
				break;
			case STOP:
				if(*KEY_PIO == 0x3)
					next_state = START;
				else if(*KEY_PIO == 0x1)
1000023c:	e0bffe17 	ldw	r2,-8(fp)
10000240:	10800017 	ldw	r2,0(r2)
10000244:	10800058 	cmpnei	r2,r2,1
10000248:	1000031e 	bne	r2,zero,10000258 <main+0x1fc>
					next_state = ADD;
1000024c:	00800044 	movi	r2,1
10000250:	e0bffb15 	stw	r2,-20(fp)
				else
					next_state = STOP;
				break;
10000254:	00000206 	br	10000260 <main+0x204>
				if(*KEY_PIO == 0x3)
					next_state = START;
				else if(*KEY_PIO == 0x1)
					next_state = ADD;
				else
					next_state = STOP;
10000258:	00800104 	movi	r2,4
1000025c:	e0bffb15 	stw	r2,-20(fp)
				break;
10000260:	0001883a 	nop
		}
	}
10000264:	003f8c06 	br	10000098 <__alt_data_end+0xf8000098>

10000268 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
10000268:	defffc04 	addi	sp,sp,-16
1000026c:	df000315 	stw	fp,12(sp)
10000270:	df000304 	addi	fp,sp,12
10000274:	e13ffd15 	stw	r4,-12(fp)
10000278:	e17ffe15 	stw	r5,-8(fp)
1000027c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
10000280:	e0fffe17 	ldw	r3,-8(fp)
10000284:	e0bffd17 	ldw	r2,-12(fp)
10000288:	18800c26 	beq	r3,r2,100002bc <alt_load_section+0x54>
  {
    while( to != end )
1000028c:	00000806 	br	100002b0 <alt_load_section+0x48>
    {
      *to++ = *from++;
10000290:	e0bffe17 	ldw	r2,-8(fp)
10000294:	10c00104 	addi	r3,r2,4
10000298:	e0fffe15 	stw	r3,-8(fp)
1000029c:	e0fffd17 	ldw	r3,-12(fp)
100002a0:	19000104 	addi	r4,r3,4
100002a4:	e13ffd15 	stw	r4,-12(fp)
100002a8:	18c00017 	ldw	r3,0(r3)
100002ac:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
100002b0:	e0fffe17 	ldw	r3,-8(fp)
100002b4:	e0bfff17 	ldw	r2,-4(fp)
100002b8:	18bff51e 	bne	r3,r2,10000290 <__alt_data_end+0xf8000290>
    {
      *to++ = *from++;
    }
  }
}
100002bc:	0001883a 	nop
100002c0:	e037883a 	mov	sp,fp
100002c4:	df000017 	ldw	fp,0(sp)
100002c8:	dec00104 	addi	sp,sp,4
100002cc:	f800283a 	ret

100002d0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
100002d0:	defffe04 	addi	sp,sp,-8
100002d4:	dfc00115 	stw	ra,4(sp)
100002d8:	df000015 	stw	fp,0(sp)
100002dc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
100002e0:	01840034 	movhi	r6,4096
100002e4:	31840d04 	addi	r6,r6,4148
100002e8:	01440034 	movhi	r5,4096
100002ec:	29429204 	addi	r5,r5,2632
100002f0:	01040034 	movhi	r4,4096
100002f4:	21040d04 	addi	r4,r4,4148
100002f8:	00002680 	call	10000268 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
100002fc:	01840034 	movhi	r6,4096
10000300:	31800804 	addi	r6,r6,32
10000304:	01440034 	movhi	r5,4096
10000308:	29400804 	addi	r5,r5,32
1000030c:	01040034 	movhi	r4,4096
10000310:	21000804 	addi	r4,r4,32
10000314:	00002680 	call	10000268 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
10000318:	01840034 	movhi	r6,4096
1000031c:	31829204 	addi	r6,r6,2632
10000320:	01440034 	movhi	r5,4096
10000324:	29428e04 	addi	r5,r5,2616
10000328:	01040034 	movhi	r4,4096
1000032c:	21028e04 	addi	r4,r4,2616
10000330:	00002680 	call	10000268 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
10000334:	00005240 	call	10000524 <alt_dcache_flush_all>
  alt_icache_flush_all();
10000338:	00006300 	call	10000630 <alt_icache_flush_all>
}
1000033c:	0001883a 	nop
10000340:	e037883a 	mov	sp,fp
10000344:	dfc00117 	ldw	ra,4(sp)
10000348:	df000017 	ldw	fp,0(sp)
1000034c:	dec00204 	addi	sp,sp,8
10000350:	f800283a 	ret

10000354 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10000354:	defffd04 	addi	sp,sp,-12
10000358:	dfc00215 	stw	ra,8(sp)
1000035c:	df000115 	stw	fp,4(sp)
10000360:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10000364:	0009883a 	mov	r4,zero
10000368:	00003b40 	call	100003b4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1000036c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10000370:	00003ec0 	call	100003ec <alt_sys_init>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
10000374:	00005700 	call	10000570 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
10000378:	01040034 	movhi	r4,4096
1000037c:	21017404 	addi	r4,r4,1488
10000380:	00006f80 	call	100006f8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
10000384:	d0a18317 	ldw	r2,-31220(gp)
10000388:	d0e18417 	ldw	r3,-31216(gp)
1000038c:	d1218517 	ldw	r4,-31212(gp)
10000390:	200d883a 	mov	r6,r4
10000394:	180b883a 	mov	r5,r3
10000398:	1009883a 	mov	r4,r2
1000039c:	000005c0 	call	1000005c <main>
100003a0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
100003a4:	01000044 	movi	r4,1
100003a8:	000044c0 	call	1000044c <close>
  exit (result);
100003ac:	e13fff17 	ldw	r4,-4(fp)
100003b0:	000070c0 	call	1000070c <exit>

100003b4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
100003b4:	defffd04 	addi	sp,sp,-12
100003b8:	dfc00215 	stw	ra,8(sp)
100003bc:	df000115 	stw	fp,4(sp)
100003c0:	df000104 	addi	fp,sp,4
100003c4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
100003c8:	00006d40 	call	100006d4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
100003cc:	00800044 	movi	r2,1
100003d0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
100003d4:	0001883a 	nop
100003d8:	e037883a 	mov	sp,fp
100003dc:	dfc00117 	ldw	ra,4(sp)
100003e0:	df000017 	ldw	fp,0(sp)
100003e4:	dec00204 	addi	sp,sp,8
100003e8:	f800283a 	ret

100003ec <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
100003ec:	deffff04 	addi	sp,sp,-4
100003f0:	df000015 	stw	fp,0(sp)
100003f4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
100003f8:	0001883a 	nop
}
100003fc:	0001883a 	nop
10000400:	e037883a 	mov	sp,fp
10000404:	df000017 	ldw	fp,0(sp)
10000408:	dec00104 	addi	sp,sp,4
1000040c:	f800283a 	ret

10000410 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10000410:	defffe04 	addi	sp,sp,-8
10000414:	dfc00115 	stw	ra,4(sp)
10000418:	df000015 	stw	fp,0(sp)
1000041c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10000420:	d0a00517 	ldw	r2,-32748(gp)
10000424:	10000326 	beq	r2,zero,10000434 <alt_get_errno+0x24>
10000428:	d0a00517 	ldw	r2,-32748(gp)
1000042c:	103ee83a 	callr	r2
10000430:	00000106 	br	10000438 <alt_get_errno+0x28>
10000434:	d0a18604 	addi	r2,gp,-31208
}
10000438:	e037883a 	mov	sp,fp
1000043c:	dfc00117 	ldw	ra,4(sp)
10000440:	df000017 	ldw	fp,0(sp)
10000444:	dec00204 	addi	sp,sp,8
10000448:	f800283a 	ret

1000044c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000044c:	defffb04 	addi	sp,sp,-20
10000450:	dfc00415 	stw	ra,16(sp)
10000454:	df000315 	stw	fp,12(sp)
10000458:	df000304 	addi	fp,sp,12
1000045c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
10000460:	e0bfff17 	ldw	r2,-4(fp)
10000464:	10000816 	blt	r2,zero,10000488 <close+0x3c>
10000468:	01400304 	movi	r5,12
1000046c:	e13fff17 	ldw	r4,-4(fp)
10000470:	00009dc0 	call	100009dc <__mulsi3>
10000474:	1007883a 	mov	r3,r2
10000478:	00840034 	movhi	r2,4096
1000047c:	10829c04 	addi	r2,r2,2672
10000480:	1885883a 	add	r2,r3,r2
10000484:	00000106 	br	1000048c <close+0x40>
10000488:	0005883a 	mov	r2,zero
1000048c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
10000490:	e0bffd17 	ldw	r2,-12(fp)
10000494:	10001926 	beq	r2,zero,100004fc <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
10000498:	e0bffd17 	ldw	r2,-12(fp)
1000049c:	10800017 	ldw	r2,0(r2)
100004a0:	10800417 	ldw	r2,16(r2)
100004a4:	10000626 	beq	r2,zero,100004c0 <close+0x74>
100004a8:	e0bffd17 	ldw	r2,-12(fp)
100004ac:	10800017 	ldw	r2,0(r2)
100004b0:	10800417 	ldw	r2,16(r2)
100004b4:	e13ffd17 	ldw	r4,-12(fp)
100004b8:	103ee83a 	callr	r2
100004bc:	00000106 	br	100004c4 <close+0x78>
100004c0:	0005883a 	mov	r2,zero
100004c4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
100004c8:	e13fff17 	ldw	r4,-4(fp)
100004cc:	00006500 	call	10000650 <alt_release_fd>
    if (rval < 0)
100004d0:	e0bffe17 	ldw	r2,-8(fp)
100004d4:	1000070e 	bge	r2,zero,100004f4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
100004d8:	00004100 	call	10000410 <alt_get_errno>
100004dc:	1007883a 	mov	r3,r2
100004e0:	e0bffe17 	ldw	r2,-8(fp)
100004e4:	0085c83a 	sub	r2,zero,r2
100004e8:	18800015 	stw	r2,0(r3)
      return -1;
100004ec:	00bfffc4 	movi	r2,-1
100004f0:	00000706 	br	10000510 <close+0xc4>
    }
    return 0;
100004f4:	0005883a 	mov	r2,zero
100004f8:	00000506 	br	10000510 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
100004fc:	00004100 	call	10000410 <alt_get_errno>
10000500:	1007883a 	mov	r3,r2
10000504:	00801444 	movi	r2,81
10000508:	18800015 	stw	r2,0(r3)
    return -1;
1000050c:	00bfffc4 	movi	r2,-1
  }
}
10000510:	e037883a 	mov	sp,fp
10000514:	dfc00117 	ldw	ra,4(sp)
10000518:	df000017 	ldw	fp,0(sp)
1000051c:	dec00204 	addi	sp,sp,8
10000520:	f800283a 	ret

10000524 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10000524:	deffff04 	addi	sp,sp,-4
10000528:	df000015 	stw	fp,0(sp)
1000052c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10000530:	0001883a 	nop
10000534:	e037883a 	mov	sp,fp
10000538:	df000017 	ldw	fp,0(sp)
1000053c:	dec00104 	addi	sp,sp,4
10000540:	f800283a 	ret

10000544 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
10000544:	defffc04 	addi	sp,sp,-16
10000548:	df000315 	stw	fp,12(sp)
1000054c:	df000304 	addi	fp,sp,12
10000550:	e13ffd15 	stw	r4,-12(fp)
10000554:	e17ffe15 	stw	r5,-8(fp)
10000558:	e1bfff15 	stw	r6,-4(fp)
  return len;
1000055c:	e0bfff17 	ldw	r2,-4(fp)
}
10000560:	e037883a 	mov	sp,fp
10000564:	df000017 	ldw	fp,0(sp)
10000568:	dec00104 	addi	sp,sp,4
1000056c:	f800283a 	ret

10000570 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10000570:	defffd04 	addi	sp,sp,-12
10000574:	dfc00215 	stw	ra,8(sp)
10000578:	df000115 	stw	fp,4(sp)
1000057c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10000580:	00840034 	movhi	r2,4096
10000584:	10828d04 	addi	r2,r2,2612
10000588:	e0bfff15 	stw	r2,-4(fp)
1000058c:	00000606 	br	100005a8 <_do_ctors+0x38>
        (*ctor) (); 
10000590:	e0bfff17 	ldw	r2,-4(fp)
10000594:	10800017 	ldw	r2,0(r2)
10000598:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1000059c:	e0bfff17 	ldw	r2,-4(fp)
100005a0:	10bfff04 	addi	r2,r2,-4
100005a4:	e0bfff15 	stw	r2,-4(fp)
100005a8:	e0ffff17 	ldw	r3,-4(fp)
100005ac:	00840034 	movhi	r2,4096
100005b0:	10828e04 	addi	r2,r2,2616
100005b4:	18bff62e 	bgeu	r3,r2,10000590 <__alt_data_end+0xf8000590>
        (*ctor) (); 
}
100005b8:	0001883a 	nop
100005bc:	e037883a 	mov	sp,fp
100005c0:	dfc00117 	ldw	ra,4(sp)
100005c4:	df000017 	ldw	fp,0(sp)
100005c8:	dec00204 	addi	sp,sp,8
100005cc:	f800283a 	ret

100005d0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
100005d0:	defffd04 	addi	sp,sp,-12
100005d4:	dfc00215 	stw	ra,8(sp)
100005d8:	df000115 	stw	fp,4(sp)
100005dc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
100005e0:	00840034 	movhi	r2,4096
100005e4:	10828d04 	addi	r2,r2,2612
100005e8:	e0bfff15 	stw	r2,-4(fp)
100005ec:	00000606 	br	10000608 <_do_dtors+0x38>
        (*dtor) (); 
100005f0:	e0bfff17 	ldw	r2,-4(fp)
100005f4:	10800017 	ldw	r2,0(r2)
100005f8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
100005fc:	e0bfff17 	ldw	r2,-4(fp)
10000600:	10bfff04 	addi	r2,r2,-4
10000604:	e0bfff15 	stw	r2,-4(fp)
10000608:	e0ffff17 	ldw	r3,-4(fp)
1000060c:	00840034 	movhi	r2,4096
10000610:	10828e04 	addi	r2,r2,2616
10000614:	18bff62e 	bgeu	r3,r2,100005f0 <__alt_data_end+0xf80005f0>
        (*dtor) (); 
}
10000618:	0001883a 	nop
1000061c:	e037883a 	mov	sp,fp
10000620:	dfc00117 	ldw	ra,4(sp)
10000624:	df000017 	ldw	fp,0(sp)
10000628:	dec00204 	addi	sp,sp,8
1000062c:	f800283a 	ret

10000630 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10000630:	deffff04 	addi	sp,sp,-4
10000634:	df000015 	stw	fp,0(sp)
10000638:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
1000063c:	0001883a 	nop
10000640:	e037883a 	mov	sp,fp
10000644:	df000017 	ldw	fp,0(sp)
10000648:	dec00104 	addi	sp,sp,4
1000064c:	f800283a 	ret

10000650 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
10000650:	defffc04 	addi	sp,sp,-16
10000654:	dfc00315 	stw	ra,12(sp)
10000658:	df000215 	stw	fp,8(sp)
1000065c:	dc000115 	stw	r16,4(sp)
10000660:	df000204 	addi	fp,sp,8
10000664:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
10000668:	e0bffe17 	ldw	r2,-8(fp)
1000066c:	108000d0 	cmplti	r2,r2,3
10000670:	1000111e 	bne	r2,zero,100006b8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
10000674:	04040034 	movhi	r16,4096
10000678:	84029c04 	addi	r16,r16,2672
1000067c:	e0bffe17 	ldw	r2,-8(fp)
10000680:	01400304 	movi	r5,12
10000684:	1009883a 	mov	r4,r2
10000688:	00009dc0 	call	100009dc <__mulsi3>
1000068c:	8085883a 	add	r2,r16,r2
10000690:	10800204 	addi	r2,r2,8
10000694:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
10000698:	04040034 	movhi	r16,4096
1000069c:	84029c04 	addi	r16,r16,2672
100006a0:	e0bffe17 	ldw	r2,-8(fp)
100006a4:	01400304 	movi	r5,12
100006a8:	1009883a 	mov	r4,r2
100006ac:	00009dc0 	call	100009dc <__mulsi3>
100006b0:	8085883a 	add	r2,r16,r2
100006b4:	10000015 	stw	zero,0(r2)
  }
}
100006b8:	0001883a 	nop
100006bc:	e6ffff04 	addi	sp,fp,-4
100006c0:	dfc00217 	ldw	ra,8(sp)
100006c4:	df000117 	ldw	fp,4(sp)
100006c8:	dc000017 	ldw	r16,0(sp)
100006cc:	dec00304 	addi	sp,sp,12
100006d0:	f800283a 	ret

100006d4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
100006d4:	deffff04 	addi	sp,sp,-4
100006d8:	df000015 	stw	fp,0(sp)
100006dc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
100006e0:	000170fa 	wrctl	ienable,zero
}
100006e4:	0001883a 	nop
100006e8:	e037883a 	mov	sp,fp
100006ec:	df000017 	ldw	fp,0(sp)
100006f0:	dec00104 	addi	sp,sp,4
100006f4:	f800283a 	ret

100006f8 <atexit>:
100006f8:	200b883a 	mov	r5,r4
100006fc:	000f883a 	mov	r7,zero
10000700:	000d883a 	mov	r6,zero
10000704:	0009883a 	mov	r4,zero
10000708:	00007441 	jmpi	10000744 <__register_exitproc>

1000070c <exit>:
1000070c:	defffe04 	addi	sp,sp,-8
10000710:	000b883a 	mov	r5,zero
10000714:	dc000015 	stw	r16,0(sp)
10000718:	dfc00115 	stw	ra,4(sp)
1000071c:	2021883a 	mov	r16,r4
10000720:	000085c0 	call	1000085c <__call_exitprocs>
10000724:	00840034 	movhi	r2,4096
10000728:	10840b04 	addi	r2,r2,4140
1000072c:	11000017 	ldw	r4,0(r2)
10000730:	20800f17 	ldw	r2,60(r4)
10000734:	10000126 	beq	r2,zero,1000073c <exit+0x30>
10000738:	103ee83a 	callr	r2
1000073c:	8009883a 	mov	r4,r16
10000740:	0000a040 	call	10000a04 <_exit>

10000744 <__register_exitproc>:
10000744:	defffa04 	addi	sp,sp,-24
10000748:	dc000315 	stw	r16,12(sp)
1000074c:	04040034 	movhi	r16,4096
10000750:	84040b04 	addi	r16,r16,4140
10000754:	80c00017 	ldw	r3,0(r16)
10000758:	dc400415 	stw	r17,16(sp)
1000075c:	dfc00515 	stw	ra,20(sp)
10000760:	18805217 	ldw	r2,328(r3)
10000764:	2023883a 	mov	r17,r4
10000768:	10003726 	beq	r2,zero,10000848 <__register_exitproc+0x104>
1000076c:	10c00117 	ldw	r3,4(r2)
10000770:	010007c4 	movi	r4,31
10000774:	20c00e16 	blt	r4,r3,100007b0 <__register_exitproc+0x6c>
10000778:	1a000044 	addi	r8,r3,1
1000077c:	8800221e 	bne	r17,zero,10000808 <__register_exitproc+0xc4>
10000780:	18c00084 	addi	r3,r3,2
10000784:	18c7883a 	add	r3,r3,r3
10000788:	18c7883a 	add	r3,r3,r3
1000078c:	12000115 	stw	r8,4(r2)
10000790:	10c7883a 	add	r3,r2,r3
10000794:	19400015 	stw	r5,0(r3)
10000798:	0005883a 	mov	r2,zero
1000079c:	dfc00517 	ldw	ra,20(sp)
100007a0:	dc400417 	ldw	r17,16(sp)
100007a4:	dc000317 	ldw	r16,12(sp)
100007a8:	dec00604 	addi	sp,sp,24
100007ac:	f800283a 	ret
100007b0:	00800034 	movhi	r2,0
100007b4:	10800004 	addi	r2,r2,0
100007b8:	10002626 	beq	r2,zero,10000854 <__register_exitproc+0x110>
100007bc:	01006404 	movi	r4,400
100007c0:	d9400015 	stw	r5,0(sp)
100007c4:	d9800115 	stw	r6,4(sp)
100007c8:	d9c00215 	stw	r7,8(sp)
100007cc:	00000000 	call	10000000 <__alt_mem_sdram>
100007d0:	d9400017 	ldw	r5,0(sp)
100007d4:	d9800117 	ldw	r6,4(sp)
100007d8:	d9c00217 	ldw	r7,8(sp)
100007dc:	10001d26 	beq	r2,zero,10000854 <__register_exitproc+0x110>
100007e0:	81000017 	ldw	r4,0(r16)
100007e4:	10000115 	stw	zero,4(r2)
100007e8:	02000044 	movi	r8,1
100007ec:	22405217 	ldw	r9,328(r4)
100007f0:	0007883a 	mov	r3,zero
100007f4:	12400015 	stw	r9,0(r2)
100007f8:	20805215 	stw	r2,328(r4)
100007fc:	10006215 	stw	zero,392(r2)
10000800:	10006315 	stw	zero,396(r2)
10000804:	883fde26 	beq	r17,zero,10000780 <__alt_data_end+0xf8000780>
10000808:	18c9883a 	add	r4,r3,r3
1000080c:	2109883a 	add	r4,r4,r4
10000810:	1109883a 	add	r4,r2,r4
10000814:	21802215 	stw	r6,136(r4)
10000818:	01800044 	movi	r6,1
1000081c:	12406217 	ldw	r9,392(r2)
10000820:	30cc983a 	sll	r6,r6,r3
10000824:	4992b03a 	or	r9,r9,r6
10000828:	12406215 	stw	r9,392(r2)
1000082c:	21c04215 	stw	r7,264(r4)
10000830:	01000084 	movi	r4,2
10000834:	893fd21e 	bne	r17,r4,10000780 <__alt_data_end+0xf8000780>
10000838:	11006317 	ldw	r4,396(r2)
1000083c:	218cb03a 	or	r6,r4,r6
10000840:	11806315 	stw	r6,396(r2)
10000844:	003fce06 	br	10000780 <__alt_data_end+0xf8000780>
10000848:	18805304 	addi	r2,r3,332
1000084c:	18805215 	stw	r2,328(r3)
10000850:	003fc606 	br	1000076c <__alt_data_end+0xf800076c>
10000854:	00bfffc4 	movi	r2,-1
10000858:	003fd006 	br	1000079c <__alt_data_end+0xf800079c>

1000085c <__call_exitprocs>:
1000085c:	defff504 	addi	sp,sp,-44
10000860:	df000915 	stw	fp,36(sp)
10000864:	dd400615 	stw	r21,24(sp)
10000868:	dc800315 	stw	r18,12(sp)
1000086c:	dfc00a15 	stw	ra,40(sp)
10000870:	ddc00815 	stw	r23,32(sp)
10000874:	dd800715 	stw	r22,28(sp)
10000878:	dd000515 	stw	r20,20(sp)
1000087c:	dcc00415 	stw	r19,16(sp)
10000880:	dc400215 	stw	r17,8(sp)
10000884:	dc000115 	stw	r16,4(sp)
10000888:	d9000015 	stw	r4,0(sp)
1000088c:	2839883a 	mov	fp,r5
10000890:	04800044 	movi	r18,1
10000894:	057fffc4 	movi	r21,-1
10000898:	00840034 	movhi	r2,4096
1000089c:	10840b04 	addi	r2,r2,4140
100008a0:	12000017 	ldw	r8,0(r2)
100008a4:	45005217 	ldw	r20,328(r8)
100008a8:	44c05204 	addi	r19,r8,328
100008ac:	a0001c26 	beq	r20,zero,10000920 <__call_exitprocs+0xc4>
100008b0:	a0800117 	ldw	r2,4(r20)
100008b4:	15ffffc4 	addi	r23,r2,-1
100008b8:	b8000d16 	blt	r23,zero,100008f0 <__call_exitprocs+0x94>
100008bc:	14000044 	addi	r16,r2,1
100008c0:	8421883a 	add	r16,r16,r16
100008c4:	8421883a 	add	r16,r16,r16
100008c8:	84402004 	addi	r17,r16,128
100008cc:	a463883a 	add	r17,r20,r17
100008d0:	a421883a 	add	r16,r20,r16
100008d4:	e0001e26 	beq	fp,zero,10000950 <__call_exitprocs+0xf4>
100008d8:	80804017 	ldw	r2,256(r16)
100008dc:	e0801c26 	beq	fp,r2,10000950 <__call_exitprocs+0xf4>
100008e0:	bdffffc4 	addi	r23,r23,-1
100008e4:	843fff04 	addi	r16,r16,-4
100008e8:	8c7fff04 	addi	r17,r17,-4
100008ec:	bd7ff91e 	bne	r23,r21,100008d4 <__alt_data_end+0xf80008d4>
100008f0:	00800034 	movhi	r2,0
100008f4:	10800004 	addi	r2,r2,0
100008f8:	10000926 	beq	r2,zero,10000920 <__call_exitprocs+0xc4>
100008fc:	a0800117 	ldw	r2,4(r20)
10000900:	1000301e 	bne	r2,zero,100009c4 <__call_exitprocs+0x168>
10000904:	a0800017 	ldw	r2,0(r20)
10000908:	10003226 	beq	r2,zero,100009d4 <__call_exitprocs+0x178>
1000090c:	a009883a 	mov	r4,r20
10000910:	98800015 	stw	r2,0(r19)
10000914:	00000000 	call	10000000 <__alt_mem_sdram>
10000918:	9d000017 	ldw	r20,0(r19)
1000091c:	a03fe41e 	bne	r20,zero,100008b0 <__alt_data_end+0xf80008b0>
10000920:	dfc00a17 	ldw	ra,40(sp)
10000924:	df000917 	ldw	fp,36(sp)
10000928:	ddc00817 	ldw	r23,32(sp)
1000092c:	dd800717 	ldw	r22,28(sp)
10000930:	dd400617 	ldw	r21,24(sp)
10000934:	dd000517 	ldw	r20,20(sp)
10000938:	dcc00417 	ldw	r19,16(sp)
1000093c:	dc800317 	ldw	r18,12(sp)
10000940:	dc400217 	ldw	r17,8(sp)
10000944:	dc000117 	ldw	r16,4(sp)
10000948:	dec00b04 	addi	sp,sp,44
1000094c:	f800283a 	ret
10000950:	a0800117 	ldw	r2,4(r20)
10000954:	80c00017 	ldw	r3,0(r16)
10000958:	10bfffc4 	addi	r2,r2,-1
1000095c:	15c01426 	beq	r2,r23,100009b0 <__call_exitprocs+0x154>
10000960:	80000015 	stw	zero,0(r16)
10000964:	183fde26 	beq	r3,zero,100008e0 <__alt_data_end+0xf80008e0>
10000968:	95c8983a 	sll	r4,r18,r23
1000096c:	a0806217 	ldw	r2,392(r20)
10000970:	a5800117 	ldw	r22,4(r20)
10000974:	2084703a 	and	r2,r4,r2
10000978:	10000b26 	beq	r2,zero,100009a8 <__call_exitprocs+0x14c>
1000097c:	a0806317 	ldw	r2,396(r20)
10000980:	2088703a 	and	r4,r4,r2
10000984:	20000c1e 	bne	r4,zero,100009b8 <__call_exitprocs+0x15c>
10000988:	89400017 	ldw	r5,0(r17)
1000098c:	d9000017 	ldw	r4,0(sp)
10000990:	183ee83a 	callr	r3
10000994:	a0800117 	ldw	r2,4(r20)
10000998:	15bfbf1e 	bne	r2,r22,10000898 <__alt_data_end+0xf8000898>
1000099c:	98800017 	ldw	r2,0(r19)
100009a0:	153fcf26 	beq	r2,r20,100008e0 <__alt_data_end+0xf80008e0>
100009a4:	003fbc06 	br	10000898 <__alt_data_end+0xf8000898>
100009a8:	183ee83a 	callr	r3
100009ac:	003ff906 	br	10000994 <__alt_data_end+0xf8000994>
100009b0:	a5c00115 	stw	r23,4(r20)
100009b4:	003feb06 	br	10000964 <__alt_data_end+0xf8000964>
100009b8:	89000017 	ldw	r4,0(r17)
100009bc:	183ee83a 	callr	r3
100009c0:	003ff406 	br	10000994 <__alt_data_end+0xf8000994>
100009c4:	a0800017 	ldw	r2,0(r20)
100009c8:	a027883a 	mov	r19,r20
100009cc:	1029883a 	mov	r20,r2
100009d0:	003fb606 	br	100008ac <__alt_data_end+0xf80008ac>
100009d4:	0005883a 	mov	r2,zero
100009d8:	003ffb06 	br	100009c8 <__alt_data_end+0xf80009c8>

100009dc <__mulsi3>:
100009dc:	0005883a 	mov	r2,zero
100009e0:	20000726 	beq	r4,zero,10000a00 <__mulsi3+0x24>
100009e4:	20c0004c 	andi	r3,r4,1
100009e8:	2008d07a 	srli	r4,r4,1
100009ec:	18000126 	beq	r3,zero,100009f4 <__mulsi3+0x18>
100009f0:	1145883a 	add	r2,r2,r5
100009f4:	294b883a 	add	r5,r5,r5
100009f8:	203ffa1e 	bne	r4,zero,100009e4 <__alt_data_end+0xf80009e4>
100009fc:	f800283a 	ret
10000a00:	f800283a 	ret

10000a04 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10000a04:	defffd04 	addi	sp,sp,-12
10000a08:	df000215 	stw	fp,8(sp)
10000a0c:	df000204 	addi	fp,sp,8
10000a10:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10000a14:	0001883a 	nop
10000a18:	e0bfff17 	ldw	r2,-4(fp)
10000a1c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10000a20:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10000a24:	10000226 	beq	r2,zero,10000a30 <_exit+0x2c>
    ALT_SIM_FAIL();
10000a28:	002af070 	cmpltui	zero,zero,43969
10000a2c:	00000106 	br	10000a34 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10000a30:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10000a34:	003fff06 	br	10000a34 <__alt_data_end+0xf8000a34>
